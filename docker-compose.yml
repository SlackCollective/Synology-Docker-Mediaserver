version: "3.7"
########################### NETWORKS
networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    # ipv4_address: 192.168.254.254 # You can specify a static IP

########################### SERVICES
services:
  ############################# SYSTEM CONTAINERS
  traefik:
    container_name: traefik
    image: traefik:livarot # the livarot tag refers to v2.4.x
    restart: unless-stopped
    logging:
      driver: local
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs:
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22,172.18.0.1/24,192.168.1.1/24,172.18.0.1/24,172.17.0.1/24
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --api.dashboard=true
      # - --pilot.token=token_number
      - --log=true
      - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # - --accessLog=true
      # - --accessLog.filePath=/traefik.log
      # - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      # - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --entrypoints.https.http.tls.options=tls-opts@file
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${DOMAINNAME}
      - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAINNAME}
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - t2_proxy
    ports:
      - target: 80
        published: 89 # 80 fwd to 89 in router to get around Synology control of 80
        protocol: tcp
        mode: host
      - target: 443
        published: 449 #443 fwd to 449 in router to get around Synology control of 80
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080 #443 fwd to 449 in router to get around Synology control of 80
        protocol: tcp
        mode: host
    volumes:
      - ${USERDIR}/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      # - ${USERDIR}/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting the container
      - ${USERDIR}/traefik2:/etc/traefik
      - ${USERDIR}/traefik2/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_TOKEN}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)"
      ## Services - API
      - "traefik.http.routers.traefik.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik.middlewares=yourchain-name@file"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth
    command: ./traefik-forward-auth --rule.api.action=allow --rule.api.rule="PathPrefix(`/api`)"
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    environment:
      - CLIENT_ID=${GOOGLE_CLIENT_ID}
      - CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${OAUTH_SECRET}
      - COOKIE_DOMAIN=${DOMAINNAME}
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.${DOMAINNAME}
      - URL_PATH=/_oauth
      - WHITELIST=comma-separated email address list
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth.entrypoints=https"
      - "traefik.http.routers.oauth.rule=Host(`oauth.${DOMAINNAME}`)"
      ## HTTP Services
      - "traefik.http.routers.oauth.service=oauth"
      - "traefik.http.services.oauth.loadbalancer.server.port=4181"
      ## Middlewares
      - "traefik.http.routers.oauth.middlewares=yourchain-name@file"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# FRONTENDS
  # Organizr - Unified Frontend
  organizr:
    container_name: organizr
    image: organizr/organizr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/organizr:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - fpm=true #true or false | using true will provide better performance
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr.entrypoints=https"
      - "traefik.http.routers.organizr.rule=Host(`organizr.${DOMAINNAME}`)"
      ## TLS and middlewares
      - "traefik.http.routers.organizr.middlewares=yourchain-name@file"
      ## Service
      - "traefik.http.routers.organizr.service=organizr"
      - "traefik.http.services.organizr.loadbalancer.server.port=80"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# PVRS
  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    depends_on:
      - hydra
      - sabnzbd
      - deluge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=022
    volumes:
      - ${USERDIR}/sonarr:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-noauth.entrypoints=https"
      - "traefik.http.routers.sonarr-noauth.rule=Host(`sonarr.${DOMAINNAME}`) && (Headers(`X-Api-Key`, `${SONARR_API_KEY}`) || Query(`apikey`, `${SONARR_API_KEY}`))"
      - "traefik.http.routers.sonarr-noauth.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)"
      - "traefik.http.routers.sonarr.priority=99"
      ## TLS and middlewares
      - "traefik.http.routers.sonarr.middlewares=yourchain-name@file"
      - "traefik.http.routers.sonarr-noauth.middlewares=noauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr.service=sonarr"
      - "traefik.http.routers.sonarr-noauth.service=sonarr"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    depends_on:
      - hydra
      - sabnzbd
      - deluge
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    volumes:
      - ${USERDIR}/radarr:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-noauth.entrypoints=https"
      - "traefik.http.routers.radarr-noauth.rule=Host(`radarr.${DOMAINNAME}`) && (Headers(`X-Api-Key`, `${RADARR_API_KEY}`) || Query(`apikey`, `${RADARR_API_KEY}`))"     
      - "traefik.http.routers.radarr-noauth.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAINNAME}`)"
      - "traefik.http.routers.radarr.priority=99"
      ## TLS and middlewares
      - "traefik.http.routers.radarr.middlewares=yourchain-name@file"
      - "traefik.http.routers.radarr-noauth.middlewares=noauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr.service=radarr"
      - "traefik.http.routers.radarr-noauth.service=radarr"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# DOWNLOADERS
  # SABnzbd - Binary newsgrabber (NZB downloader)
  sabnzbd:
    image: ghcr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/sabnzbd:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sabnzbd-noauth.entrypoints=https"
      - "traefik.http.routers.sabnzbd-noauth.rule=Host(`sabnzbd.${DOMAINNAME}`) && (Headers(`X-Api-Key`, `${SABNZBD_API_KEY}`) || Query(`apikey`, `${SABNZBD_API_KEY}`))"
      - "traefik.http.routers.sabnzbd-noauth.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.sabnzbd.entrypoints=https"
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAINNAME}`)"
      - "traefik.http.routers.sabnzbd.priority=99"
      ## TLS and middlewares
      - "traefik.http.routers.sabnzbd.middlewares=yourchain-name@file"
      - "traefik.http.routers.sabnzbd-noauth.middlewares=noauth@file"
      ## Service
      - "traefik.http.routers.sabnzbd.service=sabnzbd"
      - "traefik.http.routers.sabnzbd-noauth.service=sabnzbd"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

# Deluge - Bittorrent Downloader netHOST
  deluge:
    image: ghcr.io/linuxserver/deluge
    container_name: deluge
    restart: unless-stopped
    network_mode: host
    logging:
      driver: local
    volumes:
      - ${USERDIR}/deluge:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - UMASK=022
      - DELUGE_LOGLEVEL=warn #optional
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# INDEXERS
  # NZBHydra2 - NZB meta search
  hydra:
    image: ghcr.io/linuxserver/nzbhydra2
    container_name: hydra
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/hydra2:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=022
      - LOG_LEVEL=warn
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.hydra-noauth.entrypoints=https"
      - "traefik.http.routers.hydra-noauth.rule=Host(`hydra.${DOMAINNAME}`) && (Headers(`X-Api-Key`, `${HYDRA_API_KEY}`) || Query(`apikey`, `${HYDRA_API_KEY}`))"
      - "traefik.http.routers.hydra-noauth.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.hydra.entrypoints=https"
      - "traefik.http.routers.hydra.rule=Host(`hydra.${DOMAINNAME}`)"
      - "traefik.http.routers.hydra.priority=99"
      ## TLS and middlewares
      - "traefik.http.routers.hydra.middlewares=yourchain-name@file"
      - "traefik.http.routers.hydra-noauth.middlewares=noauth@file"
      ## Service
      - "traefik.http.routers.hydra.service=hydra"
      - "traefik.http.routers.hydra-noauth.service=hydra"
      - "traefik.http.services.hydra.loadbalancer.server.port=5076"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  # Jackett - Torrent proxy
  # Set url_base in Jackett settings if using PathPrefix
  jackett:
    image: ghcr.io/linuxserver/jackett
    container_name: jackett
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jackett.entrypoints=https"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${DOMAINNAME}`)"
      ## TLS and middlewares
      - "traefik.http.routers.jackett.middlewares=yourchain-name@file"
      ## Service
      - "traefik.http.routers.jackett.service=jackett"
      - "traefik.http.services.jackett.loadbalancer.server.port=9117"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# BOOKS
  # Calibre-web  – Ebooks and Management
  calibre-web:
    image: ghcr.io/linuxserver/calibre-web
    container_name: calibre-web
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/calibre_web:/config
      - ${DATADIR}/media/library:/books
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
      - DOCKER_MODS=linuxserver/calibre-web:calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #necessary for Google oAuth to work
      - OAUTHLIB_INSECURE_TRANSPORT=1 #necessary for Google oAuth to work
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.calibre.entrypoints=https"
      - "traefik.http.routers.calibre.rule=Host(`calibre.${DOMAINNAME}`)"
      ## TLS and middlewares
      - "traefik.http.routers.calibre.middlewares=yourchain-name@file"
      ## Service
      - "traefik.http.routers.calibre.service=calibre"
      - "traefik.http.services.calibre.loadbalancer.server.port=8083"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# MEDIA FILE MANAGEMENT
# Video conversion - tdarr
  tdarr:
    image: haveagitgat/tdarr
    logging:
      driver: local
    container_name: tdarr
    restart: unless-stopped
    networks:
      - t2_proxy
    ports:
      - "${TDARR_PORT}:8265"
      - "${TDARR_SERVER}:8266"
    volumes:
      - ${USERDIR}:/app/server
      - ${USERDIR}/Tdarr/configs:/app/configs
      - ${USERDIR}/Tdarr/logs:/app/logs
      - ${DATADIR}/media:/data
      - ${DATADIR}/media:/media
      - ${DATADIR}/media/temp:/temp
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
      - serverIP=0.0.0.0
      - webUIPort=8265
      - serverPort=8266
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
      - gpus=all
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tdarr.entrypoints=https"
      - "traefik.http.routers.tdarr.rule=Host(`tdarr.${DOMAINNAME}`)"
      ## TLS and middlewares
      - "traefik.http.routers.tdarr.middlewares=yourchain-name@file"
      ## Service
      - "traefik.http.routers.tdarr.service=tdarr"
      - "traefik.http.services.tdarr.loadbalancer.server.port=8265"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  tdarr_node:
    image: haveagitgat/tdarr_node
    logging:
      driver: local
    container_name: tdarr_node
    restart: unless-stopped
    depends_on:
      - tdarr
    network_mode: service:tdarr
    volumes:
      - ${USERDIR}:/app/server
      - ${USERDIR}/Tdarr/configs:/app/configs
      - ${USERDIR}/Tdarr/logs:/app/logs
      - ${DATADIR}/media:/data
      - ${DATADIR}/media:/media
      - ${DATADIR}/media/temp:/temp
      - /etc/localtime:/etc/localtime:ro
    environment:
      - nodeID=MainNode
      - nodeIP=0.0.0.0
      - nodePort=8267
      - serverIP=0.0.0.0
      - serverPort=8266
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK_SET=002
    labels:
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

# Subtitle searching and downloading, based on release filename
  bazarr:
    image: ghcr.io/linuxserver/bazarr
    container_name: bazarr
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - ${USERDIR}/bazarr:/config
      - ${DATADIR}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-noauth.entrypoints=https"
      - "traefik.http.routers.bazarr-noauth.rule=Host(`bazarr.${DOMAINNAME}`) && (Headers(`X-Api-Key`, `${BAZARR_API_KEY}`) || Query(`apikey`, `${BAZARR_API_KEY}`))"
      - "traefik.http.routers.bazarr-noauth.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr.entrypoints=https"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAINNAME}`)"
      - "traefik.http.routers.bazarr.priority=99"
      ## TLS and middlewares
      - "traefik.http.routers.bazarr.middlewares=yourchain-name@file"
      - "traefik.http.routers.bazarr-noauth.middlewares=noauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr.service=bazarr"
      - "traefik.http.routers.bazarr-noauth.service=bazarr"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  ############################# MAINTENANCE
  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle
    container_name: dozzle
    command: # CLI arguments
      - --level=warn
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle.entrypoints=https"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAINNAME}`)"
      ## TLS and middlewares
      - "traefik.http.routers.dozzle.middlewares=yourchain-name@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle.service=dozzle"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    image: humenius/traefik-certs-dumper
    container_name: certdumper
    restart: unless-stopped
    logging:
      driver: local
    network_mode: none
    # command: --restart-containers container1,container2,container3
    volumes:
      - ${USERDIR}/traefik2/acme:/traefik:ro
      - ${USERDIR}/shared/certs:/output:rw
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DOMAIN=${DOMAINNAME}

  # Watchtower - Automatic Update of Containers/Apps
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    command: --schedule "0 0 6 * * *" --label-enable --cleanup --include-restarting
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=${TZ}
      - WATCHTOWER_NO_STARTUP_MESSAGE=true
      - WATCHTOWER_NOTIFICATIONS_LEVEL=warn

  # Vaultwarden - Locally-hosted Bitwarden
  vaultwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    restart: unless-stopped
    logging:
      driver: local
    networks:
      - t2_proxy
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBSOCKET_ENABLED=true  # Enable WebSocket notifications.
      - ADMIN_TOKEN=${VAULTWARDEN_TOKEN}
      # - IP_HEADER=CF-Connecting-IP (add this as a variable in vaultwarden.yourdomain.com/admin instead)
    volumes:
      - /volume1/vaultwarden:/data
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## Websocket Routers
      - "traefik.http.routers.vaultsock.rule=Host(`vaultwarden.${DOMAINNAME}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.vaultsock.entrypoints=https"
      - "traefik.http.routers.vaultsock.service=vaultsock"
      ## UI Routers
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAINNAME}`)"
      - "traefik.http.routers.vaultwarden.entrypoints=https"
      - "traefik.http.routers.vaultwarden.service=vaultwarden"
      ## TLS and middlewares
      - "traefik.http.routers.vaultsock.middlewares=vaultsocket@file,yourchain-name@file"
      ## HTTP Services
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      - "traefik.http.services.vaultsock.loadbalancer.server.port=3012"
      ## Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
